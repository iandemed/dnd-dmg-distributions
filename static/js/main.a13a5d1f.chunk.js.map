{"version":3,"sources":["components/shared/Chart.jsx","scripts/utils.js","components/shared/Bars.jsx","components/shared/Axis.jsx","components/DmgDistChart.jsx","components/shared/ScrubInput.jsx","components/shared/ToggleSwitch.jsx","components/OptionsPanel.jsx","scripts/combat.js","App.js","reportWebVitals.js","index.js"],"names":["ChartContext","createContext","Chart","dimensions","children","Provider","value","className","width","height","transform","marginLeft","marginTop","callAccessor","accessor","d","i","combineChartDimensions","parsedDimensions","marginRight","marginBottom","boundedHeight","Math","max","boundedWidth","Bars","data","keyAccessor","xAccessor","yAccessor","widthAccessor","heightAccessor","props","Fragment","map","key","x","y","d3","axisComponentsByDimension","label","formatTick","scale","numberOfTicks","ticks","x2","tick","y2","style","Axis","dimension","useContext","Component","defaultProps","DmgDistChart","passedSettings","ref","useRef","useState","changeWidth","changeHeight","useEffect","element","current","resizeObserver","ResizeObserver","entries","Array","isArray","length","entry","contentRect","observe","unobserve","newSettings","useChartDimensions","xScale","domain","range","nice","bins","thresholds","binsGenerator","yScale","x0","x1","ScrubInput","stateVar","setStateVar","visual_max","min_value","lastX","setLastX","scrubbing","setScrubbing","inputBox","numInput","addEventListener","onScrub","removeEventListener","useCallback","e","scrub","delta","clientX","tgt_value","round","stopPropagation","preventDefault","inputFillStyle","backgroundColor","min","position","zIndex","top","left","onMouseDown","target","onMouseUp","onMouseLeave","type","step","onChange","parseInt","ToggleSwitch","tabIndex","onKeyDown","inputTag","firstElementChild","checked","OptionsPanel","ac","setAC","advantage","setAdvantage","disadvantage","setDisadvantage","dice_sides","setDiceSides","dice_num","setDiceNum","hit_modifier","setHitModifier","damage_modifier","setDamageModifier","rollDice","num","sides","modifier","diceTotal","floor","random","checkHit","roll","targetAC","makeAttack","attackRoll","rolls","success","crit","combatDamage","attack","dmg","createDmgDist","n","dmgDist","push","App","dmgData","setDmgData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a13a5d1f.chunk.js","sourcesContent":["import React, {createContext, useContext} from 'react'\r\n\r\n/* \r\nCreate this context to avoid passing a large number of props to other\r\ncomponents that care about the size of the chart (axes, labels, etc.)\r\n*/\r\nconst ChartContext = createContext()\r\nexport const useChartDimensions = () => useContext(ChartContext)\r\n\r\n\r\nconst Chart = ({dimensions, children}) => {\r\n    \r\n    return(\r\n        <ChartContext.Provider value={dimensions}>\r\n            {/*---- Create the chart tableau ----*/}\r\n            <svg \r\n                className=\"Chart\"\r\n                width={dimensions.width}\r\n                height={dimensions.height}\r\n            >\r\n                {/*---- Create the bounds of the chart ----*/}\r\n                <g transform={`translate(${dimensions.marginLeft}, ${dimensions.marginTop})`}>\r\n                    {children}\r\n                </g>\r\n                \r\n            </svg>\r\n        </ChartContext.Provider>\r\n    )\r\n}\r\n\r\nexport default Chart","\r\nimport {useState, useRef, useEffect} from \"react\"\r\nimport ResizeObserver from \"resize-observer-polyfill\"\r\n\r\n/* \r\n    Helper function so that we can programatically call the different types of \r\n    Accessors available in d3\r\n*/\r\nexport const callAccessor = (accessor, d, i) => (\r\n    typeof accessor === \"function\" ? accessor(d, i) : accessor\r\n)\r\n\r\n\r\n/*\r\n  Cobmine the dynamic chart dimensions with the margins that we specified \r\n  manually.\r\n*/\r\nexport const combineChartDimensions = dimensions => {\r\n    let parsedDimensions = {\r\n        marginTop: 40,\r\n        marginRight: 0,\r\n        marginBottom: 40,\r\n        marginLeft: 75,\r\n        ...dimensions,\r\n    }\r\n\r\n    return {\r\n        ...parsedDimensions,\r\n        boundedHeight: Math.max(parsedDimensions.height - parsedDimensions.marginTop - parsedDimensions.marginBottom, 0),\r\n        boundedWidth: Math.max(parsedDimensions.width - parsedDimensions.marginLeft - parsedDimensions.marginRight, 0),\r\n    }\r\n}\r\n  \r\n\r\n/*\r\n  Set the chart dimensions based on the current size of the chart and dynamically\r\n  update the bounds as we resize.\r\n*/\r\nexport const useChartDimensions = passedSettings => {\r\n    const ref = useRef()\r\n    const dimensions = combineChartDimensions(passedSettings)\r\n  \r\n    const [width, changeWidth] = useState(0)\r\n    const [height, changeHeight] = useState(0)\r\n\r\n    useEffect(() => {\r\n        if (dimensions.width && dimensions.height) return [ref, dimensions]\r\n    \r\n        const element = ref.current\r\n\r\n        /*\r\n            Callback function that resizes our width and height dimensions\r\n            when we resize the window\r\n\r\n            ResizeObserver is used to avoid infinite loops and cyclic dependenices \r\n            when we try to resize with our callback function. See link for \r\n            additional documentation:\r\n                + https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\r\n        */\r\n\r\n        \r\n        const resizeObserver = new ResizeObserver(entries => {\r\n            \r\n            \r\n            // Returns undefined if entries is not an array\r\n            if (!Array.isArray(entries)) return\r\n            // Returns undefined if entries is an empty array\r\n            if (!entries.length) return\r\n\r\n\r\n            const entry = entries[0]\r\n            \r\n            // Change the width and height of the chart to the current element\r\n            if (width !== entry.contentRect.width) changeWidth(entry.contentRect.width)\r\n            if (height !== entry.contentRect.height) changeHeight(entry.contentRect.height)\r\n        })\r\n\r\n        resizeObserver.observe(element)\r\n\r\n        return () => resizeObserver.unobserve(element)\r\n\r\n    }, [passedSettings, height, width, dimensions])\r\n\r\n    const newSettings = combineChartDimensions({\r\n        ...dimensions,\r\n        width: dimensions.width || width,\r\n        height: dimensions.height || height,\r\n    })\r\n\r\n    return [ref, newSettings]\r\n}","\r\nimport React from 'react'\r\nimport * as d3 from \"d3\"\r\n\r\nimport {callAccessor} from '../../scripts/utils.js'\r\n\r\nconst Bars = ({ data, keyAccessor, xAccessor, yAccessor, widthAccessor, heightAccessor, ...props }) => (\r\n    <React.Fragment>\r\n      {data.map((d, i) => (\r\n        <rect {...props}\r\n          className=\"Bars__rect\"\r\n          key={keyAccessor(d, i)}\r\n          x={callAccessor(xAccessor, d, i)} // Use our utitlity functions to call the correctly specified accessor\r\n          y={callAccessor(yAccessor, d, i)}\r\n          width={d3.max([callAccessor(widthAccessor, d, i), 0])}\r\n          height={d3.max([callAccessor(heightAccessor, d, i), 0])}\r\n        />\r\n      ))}\r\n    </React.Fragment>\r\n  )\r\n\r\n  export default Bars","import React from \"react\"\r\nimport *  as d3 from 'd3'\r\nimport { useChartDimensions } from \"./Chart\"\r\n\r\nconst axisComponentsByDimension = {\r\n    x: AxisHorizontal,\r\n    y: AxisVertical,\r\n}\r\n\r\n/*\r\n    It is important to note that the tick marks are manually adjusted within\r\n    the respective Axis Horizontal and Axis Vertical functions ---- if you would\r\n    like to adjust the ticks or title consult the corresponding transform option\r\n    for the respective tags\r\n*/\r\n\r\nconst Axis = ({ dimension, ...props }) => {\r\n    const dimensions = useChartDimensions()\r\n    const Component = axisComponentsByDimension[dimension]\r\n    if (!Component) return null\r\n  \r\n    return (\r\n      <Component\r\n        dimensions={dimensions}\r\n        {...props}\r\n      />\r\n    )\r\n}\r\n\r\nAxis.defaultProps = {\r\n    dimension: \"x\",\r\n    scale: null,\r\n    formatTick: d3.format(\",\"),\r\n  }\r\n\r\n  export default Axis\r\n\r\n\r\n  function AxisHorizontal ({ dimensions, label, formatTick, scale, ...props }) {\r\n    const numberOfTicks = dimensions.boundedWidth < 600\r\n          ? dimensions.boundedWidth / 75\r\n          : dimensions.boundedWidth / 125\r\n  \r\n    const ticks = scale.ticks(numberOfTicks)\r\n  \r\n    return (\r\n      <g className=\"Axis AxisHorizontal\" transform={`translate(0, ${dimensions.boundedHeight})`} {...props}>\r\n        <line\r\n          className=\"Axis__line\"\r\n          x2={dimensions.boundedWidth}\r\n        />\r\n  \r\n        {/*---- Add the ticks ----*/}\r\n        {ticks.map((tick, i) => (\r\n          <text\r\n            key={tick}\r\n            className=\"Axis__tick\"\r\n            transform={`translate(${scale(tick)}, 25)`}\r\n          >\r\n            { formatTick(tick) }\r\n          </text>\r\n        ))}\r\n  \r\n        {/*---- Add the label ----*/}\r\n        {label && (\r\n          <text\r\n            className=\"Axis__label\"\r\n            transform={`translate(${dimensions.boundedWidth / 2}, 60)`}\r\n          >\r\n            { label }\r\n          </text>\r\n        )}\r\n      </g>\r\n    )\r\n  }\r\n  \r\n  function AxisVertical ({ dimensions, label, formatTick, scale, ...props }) {\r\n    const numberOfTicks = dimensions.boundedHeight / 70\r\n  \r\n    const ticks = scale.ticks(numberOfTicks)\r\n  \r\n    return (\r\n      <g className=\"Axis AxisVertical\" {...props}>\r\n        <line\r\n          className=\"Axis__line\"\r\n          y2={dimensions.boundedHeight}\r\n        />\r\n  \r\n        {/*---- Add the ticks ----*/}\r\n        {ticks.map((tick, i) => (\r\n          <text\r\n            key={tick}\r\n            className=\"Axis__tick\"\r\n            transform={`translate(-34, ${scale(tick)})`}\r\n          >\r\n            { formatTick(tick) }\r\n          </text>\r\n        ))}\r\n  \r\n        {/*---- Add the label ----*/}\r\n        {label && (\r\n          <text\r\n            className=\"Axis__label\"\r\n            style={{\r\n              transform: `translate(-56px, ${dimensions.boundedHeight / 2}px) rotate(-90deg)`\r\n            }}\r\n          >\r\n            { label }\r\n          </text>\r\n        )}\r\n      </g>\r\n    )\r\n  }","import React from 'react'\r\nimport * as d3 from \"d3\"\r\n\r\nimport '../styles/DmgDistChart.css';\r\n\r\nimport Chart from \"./shared/Chart\"\r\nimport Bars from \"./shared/Bars\"\r\nimport Axis from \"./shared/Axis\"\r\n\r\nimport {useChartDimensions} from '../scripts/utils'\r\n\r\n/**\r\n * React component to generate a histogram using D3\r\n * \r\n * @param {Object} data - a JSON-formated object containing the data that you wish to visualize\r\n * @param {function} xAccessor - An accessor function for the data displayed on the x-axis\r\n * @param {string} label - X-axis label\r\n * \r\n * @returns React element object\r\n * \r\n * @requires Chart - React component used to create the canvas\r\n * @requires Axis - React component used to draw the axes\r\n * @requires Bars - React component used to draw the bars of the histogram\r\n * \r\n */\r\n\r\nconst DmgDistChart = ({data, xAccessor, label}) => {\r\n  \r\n\r\n  const [ref, dimensions] = useChartDimensions({\r\n    marginBottom: 77,\r\n    marginRight: 10\r\n  })\r\n\r\n    /* Set the number of of bars in the generation of our chart */\r\n    const numberOfThresholds = 12\r\n\r\n    /*---- Create the scales ----*/\r\n    const xScale = d3.scaleLinear()\r\n      .domain(d3.extent(data, xAccessor))\r\n      .range([0, dimensions.boundedWidth])\r\n      .nice(numberOfThresholds)\r\n    \r\n      const binsGenerator = d3.histogram()\r\n        .domain(xScale.domain())\r\n        .value(xAccessor)\r\n        .thresholds(xScale.ticks(numberOfThresholds))\r\n\r\n    const bins = binsGenerator(data)\r\n\r\n    const yAccessor = d => d.length\r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, d3.max(bins, yAccessor)])\r\n      .range([dimensions.boundedHeight, 0])\r\n      .nice()\r\n\r\n    const barPadding = 2\r\n\r\n    const xAccessorScaled = d => xScale(d.x0) + barPadding\r\n    const yAccessorScaled = d => yScale(yAccessor(d))\r\n    const widthAccessorScaled = d => xScale(d.x1) - xScale(d.x0) - barPadding\r\n    const heightAccessorScaled = d => dimensions.boundedHeight - yScale(yAccessor(d))\r\n    const keyAccessor = (d, i) => i\r\n\r\n    return(\r\n      <div className=\"DmgDist\" ref={ref}>\r\n        {/*---- Draw the Canvas ----*/}\r\n        <Chart dimensions={dimensions}>\r\n          <Axis\r\n            dimensions={dimensions}\r\n            dimension=\"x\"\r\n            scale={xScale}\r\n            label={label}\r\n          />\r\n          <Axis\r\n            dimensions={dimensions}\r\n            dimension=\"y\"\r\n            scale={yScale}\r\n            label=\"Count\"\r\n          />\r\n          <Bars\r\n            data={bins}\r\n            keyAccessor={keyAccessor}\r\n            xAccessor={xAccessorScaled}\r\n            yAccessor={yAccessorScaled}\r\n            widthAccessor={widthAccessorScaled}\r\n            heightAccessor={heightAccessorScaled}\r\n          />\r\n        </Chart>\r\n      </div>\r\n    )\r\n\r\n}\r\n\r\nDmgDistChart.defaultProps = {\r\n  xAccessor: d => d.x,\r\n  yAccessor: d => d.y,\r\n}\r\n\r\nexport default DmgDistChart","import React, {useState, useRef, useCallback, useEffect} from 'react'\r\n\r\nimport '../../styles/ScrubInput.css'\r\n\r\nconst ScrubInput = ({label, stateVar, setStateVar, visual_max = 35, min_value = 1}) => {\r\n\r\n\r\n    /*---- Intialize state variables and references ----*/\r\n    const [lastX, setLastX] = useState(0)\r\n    const [scrubbing, setScrubbing] = useState(false)\r\n\r\n\r\n    /* \r\n        Allows me to reference specific elements in the DOM using React, in\r\n        particular attaching and removing the mousemove event listeners\r\n    */\r\n    const inputBox = useRef(null)\r\n    const numInput = useRef(null)\r\n    \r\n    useEffect(() => {\r\n        if (scrubbing) {\r\n            inputBox.current.addEventListener('mousemove', onScrub)\r\n        } else {\r\n            inputBox.current.removeEventListener('mousemove', onScrub)\r\n        }\r\n    }, [scrubbing])\r\n\r\n    /* \r\n        If we do not specify lastX in our dependency array, then it will cache\r\n        the value of lastX on render and use it everytime scrub() is called\r\n    */\r\n    const onScrub = useCallback((e) => { \r\n        scrub(e)\r\n    }, [lastX])\r\n    \r\n    /*---- Event Handler functions ----*/ \r\n\r\n    const scrub = (e) => {\r\n\r\n        let delta = (e.clientX - lastX)/10\r\n        let tgt_value = stateVar+Math.round(delta)\r\n\r\n        if (tgt_value >= min_value) setStateVar(tgt_value)\r\n\r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n\r\n    }\r\n\r\n    const handleMouseDown = (e) => {\r\n    \r\n        if (e.target === numInput.current) return\r\n\r\n        setLastX(e.clientX)\r\n        setScrubbing(true)\r\n\r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n    }\r\n\r\n\r\n    const handleMouseUp = (e) =>{\r\n\r\n        if (e.target === numInput.current && !scrubbing) return\r\n        \r\n        setScrubbing(false)\r\n        \r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n    }\r\n\r\n    /*\r\n        Stop dragging once we leave the box to prevent calling and MouseUp event\r\n        on the document.\r\n    */\r\n    const handleMouseLeave = (e) => {\r\n        \r\n        setScrubbing(false)\r\n        \r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n        \r\n    }\r\n\r\n\r\n    /*---- Generate style and render the componenet ----*/\r\n\r\n    /*\r\n        Create a style object in order to programatically adjust the width of\r\n        our div\r\n    */\r\n    const inputFillStyle = {\r\n        height: '100%',\r\n        backgroundColor: '#6B6B6B',\r\n        width: `${Math.min((stateVar/visual_max)*100, 100)}%`,\r\n        position: 'absolute',\r\n        zIndex: -1,\r\n        top: 0,\r\n        left: 0,\r\n\r\n    }\r\n\r\n    return(\r\n        <div \r\n        className=\"input-container\"\r\n        onMouseDown={handleMouseDown} \r\n        onMouseUp={handleMouseUp}\r\n        onMouseLeave={handleMouseLeave} // mouseleave does not bubble, meaning it is fired when pointer has exited element AND all descendants\r\n        ref={inputBox}\r\n        >\r\n            \r\n            <label className=\"input-label\">\r\n                {`${label}:`}\r\n                <input\r\n                    className=\"input\"\r\n                    type=\"number\" \r\n                    min={min_value} \r\n                    step=\"1\" \r\n                    value={stateVar}\r\n                    onChange={(e) => {\r\n                        setStateVar(parseInt(e.target.value)) // need to coerce to int\r\n                    }}\r\n                    ref={numInput}\r\n                />\r\n            </label>\r\n            \r\n            <div style={inputFillStyle}></div>\r\n            <div className=\"input-background\"></div>\r\n\r\n            \r\n        </div>\r\n    )    \r\n\r\n}\r\n\r\nexport default ScrubInput","import React from 'react'\r\n\r\nimport \"../../styles/ToggleSwitch.css\"\r\n\r\nconst ToggleSwitch = ({label, stateVar, setStateVar}) => {\r\n\r\n    return(\r\n        <div className=\"switch-wrapper\">\r\n            <label \r\n                className=\"switch\"\r\n                tabIndex=\"0\"\r\n                onKeyDown={(e) => {\r\n                    /*\r\n                       Function allows us to navigate to and interact with the\r\n                       Toggle Switch using the keyboard\r\n                    */\r\n                    if (e.key === \"Enter\"){\r\n                        let inputTag =  e.target.firstElementChild\r\n                        setStateVar(!inputTag.checked)\r\n                    }\r\n                }}\r\n            >\r\n                {label}\r\n                <input \r\n                    className=\"toggle-input\"\r\n                    type=\"checkbox\"\r\n                    checked={stateVar}\r\n                    onChange={(e) => {\r\n                        let inputTag =  e.target\r\n                        let value = inputTag.type === 'checkbox' ? inputTag.checked : inputTag.value\r\n                        setStateVar(value)\r\n                    }}\r\n\r\n                />\r\n                <span className=\"slider\"></span>\r\n                <span className=\"span-label\">{label}</span>\r\n            </label>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ToggleSwitch","import React from 'react'\r\n\r\nimport ScrubInput from './shared/ScrubInput.jsx'\r\nimport ToggleSwitch from './shared/ToggleSwitch.jsx'\r\n\r\nimport '../styles/OptionsPanel.css'\r\n\r\nconst OptionsPanel = ({ac, setAC, advantage, setAdvantage, \r\n    disadvantage, setDisadvantage, dice_sides, setDiceSides,\r\n    dice_num, setDiceNum, hit_modifier, setHitModifier, damage_modifier, setDamageModifier}) => {\r\n    \r\n\r\n    return(\r\n        <div className=\"OptionsPanel\">\r\n            <ScrubInput\r\n                label=\"Armor Class\"\r\n                stateVar={ac}\r\n                setStateVar={setAC}\r\n            />\r\n\r\n            <h4>Dice:</h4> \r\n\r\n            <ScrubInput\r\n                label=\"Sides\"\r\n                stateVar={dice_sides}\r\n                setStateVar={setDiceSides}\r\n                visual_max={20}\r\n            />\r\n            <ScrubInput\r\n                label=\"Number\"\r\n                stateVar={dice_num}\r\n                setStateVar={setDiceNum}\r\n                visual_max={10}\r\n            />\r\n\r\n            <h4>Modifiers:</h4>    \r\n    \r\n            <ScrubInput\r\n                label=\"Hit\"\r\n                stateVar={hit_modifier}\r\n                setStateVar={setHitModifier}\r\n                visual_max={10}\r\n                min_value={-10}\r\n            />\r\n            <ScrubInput\r\n                label=\"Damage\"\r\n                stateVar={damage_modifier}\r\n                setStateVar={setDamageModifier}\r\n                visual_max={10}\r\n                min_value={-10}\r\n            />\r\n            <div>\r\n                <ToggleSwitch\r\n                    label=\"Adv\"\r\n                    stateVar={advantage}\r\n                    setStateVar={setAdvantage}\r\n                />\r\n                <ToggleSwitch\r\n                    label=\"Disadv\"\r\n                    stateVar={disadvantage}\r\n                    setStateVar={setDisadvantage}\r\n                />\r\n            </div>\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OptionsPanel","\nfunction rollDice(num, sides, modifier = 0){\n\n    let diceTotal = 0\n    \n    // Roll the dice the specified number of times\n    for (let i=0; i < num; i++){\n        // Modifiers are applied seperately to each roll\n        diceTotal += (1 + Math.floor(Math.random() * (sides))) + modifier\n    }\n        \n    return diceTotal\n\n}\n\nfunction checkHit(roll, targetAC){\n    if (roll > targetAC) {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunction makeAttack(targetAC, modifier, advantage = false, disadvantage = false){\n\n    let attackRoll = 0\n\n    if (advantage && !disadvantage) {\n        let rolls = [rollDice(1, 20, modifier), rollDice(1,20, modifier)]\n        attackRoll = Math.max(...rolls)\n    } else if (disadvantage && !advantage) {\n        let rolls = [rollDice(1, 20, modifier), rollDice(1,20, modifier)]\n        attackRoll = Math.min(...rolls)\n    } else {\n        attackRoll = rollDice(1, 20, modifier)\n    }\n\n    if (attackRoll - modifier === 20){\n        // A natural 20 always results in a successful hit regardless of the roll\n        return {success: true, crit: true}\n    } else if (attackRoll - modifier === 1){\n        // A natural 1 always results in a miss regardless of the roll\n        return {success: false, crit: false}\n    } else if (checkHit(attackRoll, targetAC)){\n        return {success: true, crit: false}\n    } else {\n        return {success: false, crit: false}\n    }\n}\n\nfunction combatDamage(targetAC, dice_num, dice_sides, damage_modifier, hit_modifier, advantage = false, disadvantage = false){\n    \n    let attack = makeAttack(targetAC, hit_modifier, advantage, disadvantage)\n    let dmg = 0\n\n    if (attack.success && attack.crit){\n        dmg = rollDice(dice_num, dice_sides, damage_modifier) + rollDice(dice_num, dice_sides, damage_modifier)\n    } else if (attack.success){\n        dmg = rollDice(dice_num, dice_sides, damage_modifier)\n    }\n\n    return Math.max(0, dmg)\n}\n\nfunction createDmgDist(targetAC, dice_num, dice_sides, damage_modifier, hit_modifier, advantage, disadvantage, n = 1000){\n\n    let dmgDist = []\n    \n\n    for (let i = 0; i < n; i++){\n        // I process the data in d3 as a JSON object, so I save the data\n        // as an object with dmg as the \"column\"\n        dmgDist.push({\"dmg\" : combatDamage(targetAC, dice_num, dice_sides, damage_modifier, hit_modifier, advantage, disadvantage)})\n    }\n\n    return dmgDist\n}\n\nexport {createDmgDist}","import React, {useState, useEffect } from 'react'\nimport './styles/App.css'\n\nimport DmgDistChart from \"./components/DmgDistChart\"\nimport OptionsPanel from \"./components/OptionsPanel\"\nimport {createDmgDist} from \"./scripts/combat.js\"\n\n\n\nfunction App() {\n\n  const metricAccessor = d => d.dmg\n\n  const [ac, setAC] = useState(12)\n  const [advantage, setAdvantage] = useState(false)\n  const [disadvantage, setDisadvantage] = useState(false)\n  const [dice_sides, setDiceSides] = useState(12)\n  const [dice_num, setDiceNum] = useState(1)\n  const [hit_modifier, setHitModifier] = useState(3)\n  const [damage_modifier, setDamageModifier] = useState(1)\n\n\n  const [dmgData, setDmgData] = useState(createDmgDist(ac, dice_num, dice_sides, damage_modifier, hit_modifier, advantage, disadvantage))\n\n  useEffect(() => {\n    setDmgData(createDmgDist(ac, dice_num, dice_sides, damage_modifier, hit_modifier, advantage, disadvantage))\n  }, [ac, advantage, disadvantage, damage_modifier, hit_modifier, dice_sides, dice_num])\n  \n  \n\n\n \n  return (\n    <div className=\"App\">\n      <div className=\"dashboard\">\n        <div className = \"gph-container\">\n          <h4> Attack Damage Distribution </h4>\n          <DmgDistChart\n            data = {dmgData}\n            xAccessor={metricAccessor}\n            label=\"Damage\"\n          />\n        </div>\n        <OptionsPanel\n          ac={ac}\n          setAC={setAC}\n          advantage={advantage}\n          setAdvantage={setAdvantage}\n          disadvantage={disadvantage}\n          setDisadvantage={setDisadvantage}\n          dice_sides={dice_sides}\n          setDiceSides={setDiceSides}\n          dice_num={dice_num}\n          setDiceNum={setDiceNum}\n          hit_modifier={hit_modifier}\n          setHitModifier={setHitModifier}\n          damage_modifier={damage_modifier}\n          setDamageModifier={setDamageModifier}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}